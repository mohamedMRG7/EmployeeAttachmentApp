package model.eo;

import java.math.BigDecimal;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jul 17 16:50:15 EET 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class UploadedAttachemntsEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Id,
        AttachId,
        UserId,
        Did;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int ID = AttributesEnum.Id.index();
    public static final int ATTACHID = AttributesEnum.AttachId.index();
    public static final int USERID = AttributesEnum.UserId.index();
    public static final int DID = AttributesEnum.Did.index();

    /**
     * This is the default constructor (do not remove).
     */
    public UploadedAttachemntsEOImpl() {
    }

    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the value of Id
     */
    public BigDecimal getId() {
        return (BigDecimal) getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(BigDecimal value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for AttachId, using the alias name AttachId.
     * @return the value of AttachId
     */
    public BigDecimal getAttachId() {
        return (BigDecimal) getAttributeInternal(ATTACHID);
    }

    /**
     * Sets <code>value</code> as the attribute value for AttachId.
     * @param value value to set the AttachId
     */
    public void setAttachId(BigDecimal value) {
        setAttributeInternal(ATTACHID, value);
    }

    /**
     * Gets the attribute value for UserId, using the alias name UserId.
     * @return the value of UserId
     */
    public BigDecimal getUserId() {
        return (BigDecimal) getAttributeInternal(USERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for UserId.
     * @param value value to set the UserId
     */
    public void setUserId(BigDecimal value) {
        setAttributeInternal(USERID, value);
    }

    /**
     * Gets the attribute value for Did, using the alias name Did.
     * @return the value of Did
     */
    public String getDid() {
        return (String) getAttributeInternal(DID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Did.
     * @param value value to set the Did
     */
    public void setDid(String value) {
        setAttributeInternal(DID, value);
    }

    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal id) {
        return new Key(new Object[] { id });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("model.eo.UploadedAttachemntsEO");
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }
    @Override
    protected void create(AttributeList attributeList) {
        SequenceImpl seq=new  SequenceImpl("NEWS_SEQ",getDBTransaction());
        BigDecimal number = seq.getSequenceNumber().getBigDecimalValue();
        setId(number);
        super.create(attributeList);
    }
    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
       
            super.doDML(operation, e);
       
    }
}

